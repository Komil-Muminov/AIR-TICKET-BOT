from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from states import Form
from keyboards import main_keyboard, routes_keyboard, create_ticket_selection_keyboard, confirm_keyboard, yes_no_keyboard
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
import uuid
from aiogram.types import ReplyKeyboardMarkup


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGES_DIR = "uploaded_images"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(IMAGES_DIR, exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
def is_valid_date(date_str):
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤!\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_keyboard
    )

@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
async def cmd_request(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=routes_keyboard)
    await state.set_state(Form.route)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Form.route)
async def process_route(message: Message, state: FSMContext):
    route = message.text
    await state.update_data(route=route)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(Form.date)

@router.message(Form.date)
async def process_date(message: Message, state: FSMContext):
    date = message.text
    if not is_valid_date(date):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.")
        return
    
    await state.update_data(date=date)
    
    # –ó–¥–µ—Å—å –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –¥–∞—Ç—ã
    data = await state.get_data()
    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {data['route']}\n"
        f"–î–∞—Ç–∞: {data['date']}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=yes_no_keyboard
    )
    await state.set_state(Form.confirm_details)

@router.message(Form.confirm_details)
async def confirm_details(message: Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
        data = await state.get_data()
        user_id = message.from_user.id
        user_name = message.from_user.full_name
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        request_text = (f"‚úàÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–∞:\n"
                        f"–ú–∞—Ä—à—Ä—É—Ç: {data['route']}\n"
                        f"–î–∞—Ç–∞: {data['date']}\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–∏–ª–µ—Ç–æ–≤", callback_data=f"send_tickets_{user_id}")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await router.bot.send_message(router.admin_chat_id, request_text, reply_markup=confirm_keyboard)
        await message.reply("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–≥–¥–∞ –≤–∞–º –ø—Ä–∏—à–ª—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–∏–ª–µ—Ç–æ–≤.")
        await state.set_state(Form.waiting_for_tickets)
    else:
        await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=main_keyboard)
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∏–ª–µ—Ç–æ–≤
@router.callback_query(F.data.startswith("send_tickets_"))
async def handle_send_tickets(callback_query: CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
    await state.update_data(current_user_id=user_id)
    
    await callback_query.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–æ–≤...")
    await router.bot.send_message(
        callback_query.from_user.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ (—Ñ–∞–π–ª, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    await state.set_state(Form.admin_sending_tickets)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞
@router.message(Form.admin_sending_tickets)
async def process_admin_tickets(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('current_user_id')
    
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π —Å —Ñ–∞–π–ª–æ–º
    if message.document:
        file_id = message.document.file_id
        file = await router.bot.get_file(file_id)
        file_path = file.file_path
        downloaded_file = await router.bot.download_file(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        await state.update_data(ticket_file_id=file_id, file_name=message.document.file_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É
        await router.bot.send_document(
            user_id, 
            document=file_id,
            caption="üìÑ –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–∏–ª–µ—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç?",
            reply_markup=yes_no_keyboard
        )
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    elif message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
        photo = message.photo[-1]
        file_id = photo.file_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await router.bot.send_photo(
            user_id,
            photo=file_id,
            caption="üñºÔ∏è –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç?",
            reply_markup=yes_no_keyboard
        )
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π —Å —Ç–µ–∫—Å—Ç–æ–º
    elif message.text:
        ticket_options = message.text
        await state.update_data(ticket_options=ticket_options)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–ª–∏–µ–Ω—Ç—É
        await router.bot.send_message(
            user_id,
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–∏–ª–µ—Ç–æ–≤:\n\n{ticket_options}\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç?",
            reply_markup=yes_no_keyboard
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    await message.answer("–°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    client_state = router.client_states.get(user_id, {})
    client_state['state'] = 'waiting_for_purchase_decision'
    router.client_states[user_id] = client_state

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—à–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–∫—É–ø–∫–µ
@router.message(lambda message: router.client_states.get(message.from_user.id, {}).get('state') == 'waiting_for_purchase_decision')
async def process_purchase_decision(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text.lower() == "–¥–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ (—Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä):")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_state = router.client_states.get(user_id, {})
        client_state['state'] = 'entering_passport'
        router.client_states[user_id] = client_state
    else:
        await message.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.", reply_markup=main_keyboard)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_message = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {user_id}) –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞."
        await router.bot.send_message(router.admin_chat_id, admin_message)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        if user_id in router.client_states:
            del router.client_states[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@router.message(lambda message: router.client_states.get(message.from_user.id, {}).get('state') == 'entering_passport')
async def process_passport(message: Message, state: FSMContext):
    user_id = message.from_user.id
    passport_data = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
    client_state = router.client_states.get(user_id, {})
    client_state['passport_data'] = passport_data
    router.client_states[user_id] = client_state
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫–∞–Ω –∏–ª–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. –ï—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", 
                       reply_markup=ReplyKeyboardMarkup(
                           keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
                           resize_keyboard=True,
                           one_time_keyboard=True
                       ))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_state['state'] = 'uploading_passport_scan'
    router.client_states[user_id] = client_state

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∞–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
@router.message(lambda message: router.client_states.get(message.from_user.id, {}).get('state') == 'uploading_passport_scan')
async def process_passport_scan(message: Message, state: FSMContext):
    user_id = message.from_user.id
    client_state = router.client_states.get(user_id, {})
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    if message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –±–µ–∑ —Å–∫–∞–Ω–∞
        admin_message = (f"üõÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                        f"{client_state.get('passport_data')}\n\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Å–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞.\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –±–∏–ª–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç", callback_data=f"send_eticket_{user_id}")]
        ])
        
        await router.bot.send_message(router.admin_chat_id, admin_message, reply_markup=admin_keyboard)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    elif message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = message.photo[-1]
        file_id = photo.file_id
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
        file = await router.bot.get_file(file_id)
        file_path = file.file_path
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        unique_filename = f"{uuid.uuid4()}.jpg"
        save_path = os.path.join(IMAGES_DIR, unique_filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = await router.bot.download_file(file_path, destination=save_path)
        
        await message.answer("–°–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–∞–Ω
        admin_message = (f"üõÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                        f"{client_state.get('passport_data')}\n\n"
                        f"–°–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ.\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –±–∏–ª–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç", callback_data=f"send_eticket_{user_id}")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É
        await router.bot.send_message(router.admin_chat_id, admin_message)
        await router.bot.send_photo(router.admin_chat_id, photo=file_id, reply_markup=admin_keyboard)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç
    elif message.document:
        file_id = message.document.file_id
        
        await message.answer("–°–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–∞–Ω
        admin_message = (f"üõÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                        f"{client_state.get('passport_data')}\n\n"
                        f"–°–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –±–∏–ª–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç", callback_data=f"send_eticket_{user_id}")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç –∞–¥–º–∏–Ω—É
        await router.bot.send_message(router.admin_chat_id, admin_message)
        await router.bot.send_document(router.admin_chat_id, document=file_id, reply_markup=admin_keyboard)
    
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_state['state'] = 'waiting_for_eticket'
    router.client_states[user_id] = client_state

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞
@router.callback_query(F.data.startswith("send_eticket_"))
async def handle_send_eticket(callback_query: CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
    await state.update_data(current_user_id=user_id)
    
    await callback_query.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞...")
    await router.bot.send_message(
        callback_query.from_user.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç (—Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    await state.set_state(Form.admin_sending_eticket)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
@router.message(Form.admin_sending_eticket)
async def process_admin_eticket(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('current_user_id')
    
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π —Å —Ñ–∞–π–ª–æ–º
    if message.document:
        file_id = message.document.file_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É
        await router.bot.send_document(
            user_id, 
            document=file_id,
            caption="üé´ –í–æ—Ç –≤–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ë–∏–ª–µ—Ç –≤–µ—Ä–µ–Ω?",
            reply_markup=yes_no_keyboard
        )
        
        await message.answer("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    elif message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = message.photo[-1]
        file_id = photo.file_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await router.bot.send_photo(
            user_id,
            photo=file_id,
            caption="üé´ –í–æ—Ç –≤–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ë–∏–ª–µ—Ç –≤–µ—Ä–µ–Ω?",
            reply_markup=yes_no_keyboard
        )
        
        await message.answer("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_state = router.client_states.get(user_id, {})
    client_state['state'] = 'confirming_eticket'
    router.client_states[user_id] = client_state

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
@router.message(lambda message: router.client_states.get(message.from_user.id, {}).get('state') == 'confirming_eticket')
async def confirm_eticket(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text.lower() == "–¥–∞":
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –±–∏–ª–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª–µ—Ç–∞! ‚úàÔ∏è", reply_markup=main_keyboard)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {user_id}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞. –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞."
        await router.bot.send_message(router.admin_chat_id, admin_message)
    else:
        await message.answer("–í—ã —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Å –±–∏–ª–µ—Ç–æ–º –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_message = f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {user_id}) —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –±–∏–ª–µ—Ç–æ–º. –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ."
        await router.bot.send_message(router.admin_chat_id, admin_message)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    if user_id in router.client_states:
        del router.client_states[user_id]

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
@router.message(F.photo)
async def handle_image(message: Message):
    # –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    user_id = message.from_user.id
    client_state = router.client_states.get(user_id, {}).get('state')
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if not client_state or client_state not in ['uploading_passport_scan', 'confirming_eticket']:
        await message.answer("–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –±–∏–ª–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'.", 
                           reply_markup=main_keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞ —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞
def setup_routers(dp, bot, admin_chat_id):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–æ—É—Ç–µ—Ä–µ
    router.admin_chat_id = admin_chat_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ —Ä–æ—É—Ç–µ—Ä–µ
    router.bot = bot
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤
    router.client_states = {}
    
    dp.include_router(router)